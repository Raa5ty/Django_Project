from tgservice.tgbot.utils import TargetPipeline
from asgiref.sync import sync_to_async
from tgservice.tgbot.agents import survey_agent, result_survey_agent
from aiogram import Router, F, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from django.conf import settings
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

router = Router()

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞
pipeline = TargetPipeline(api_key=settings.OPENAI_API_KEY, index_path=settings.FAISS_INDEX_PATH)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    in_survey = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ exel —Ñ–∞–π–ª–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
async def run_final_pipeline(message: Message, state: FSMContext):
    data = await state.get_data()
    dialog: str = data.get("dialog", "")

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ RESULT –∞–≥–µ–Ω—Ç—É
        project = await result_survey_agent(dialog)

        if not project:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        description_project = (
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: {project.description}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {project.target_audience}"
            )

        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        profile_project = await pipeline.get_profile_creative(description_project)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î
        project.project_profile = profile_project
        await sync_to_async(project.save)()

        # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
        keywords_project = project.keywords
        top_k = project.count_requested
        relevant_objects = await pipeline.get_relevant_channels(profile_project, keywords_project, project, top_k)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
        update_relevant_objects, channels_list = await pipeline.process_generate_creatives(relevant_objects, project)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        project_id = project.id
        excel_path = await sync_to_async(pipeline.relevant_channels_to_excel)(update_relevant_objects, project_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer("–í–æ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(channels_list))
        await message.answer_document(FSInputFile(excel_path))
        await sync_to_async(os.remove)(excel_path)

    except Exception as e:
        print(f"[run_final_pipeline ERROR] {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    finally:
        await state.clear()


# 1. –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def help_command(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ send_message
    await message.answer(
        "–Ø —É–º–µ—é –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–¥ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é" 
        "–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤—ã —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¶–ê –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start"
        )
    
# 2. –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await state.set_state(Form.in_survey)
    await state.update_data(dialog="")  # –æ—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥
    await message.answer("–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –¢–ì-–∫–∞–Ω–∞–ª—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫—Ä–µ–∞—Ç–∏–≤—ã –ø–æ–¥ —Ç–≤–æ–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –ì–æ—Ç–æ–≤?")

@router.message(Form.in_survey)
async def handle_dialog(message: Message, state: FSMContext):
    state_data = await state.get_data()
    current_dialog = state_data.get("dialog", "")
    user_input = message.text

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_dialog += f"üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {user_input}\n"

    agent_response, new_state = await survey_agent(user_input, current_dialog)
    current_dialog += f"ü§ñ –ê–≥–µ–Ω—Ç: {agent_response}\n"

    await message.answer(agent_response)
    await state.update_data(dialog=current_dialog)

    if new_state == "in_analysis":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑...")
        await run_final_pipeline(message, state)