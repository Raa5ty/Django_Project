from django.core.management.base import BaseCommand
from django.db.models import Count, Q
from telethon.sync import TelegramClient
from tgservice.models import Channel, Message
from django.conf import settings
from telethon.errors import FloodWaitError, UsernameInvalidError, InvalidBufferError
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º API_ID –∏ API_HASH –∏–∑ .env
API_ID, API_HASH = settings.API_ID, settings.API_HASH
API_ID_1, API_HASH_1 = settings.API_ID_1, settings.API_HASH_1
SESSION_NAME = "session_name"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID_1, API_HASH_1)

class Command(BaseCommand):
    help = "–ü–∞—Ä—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ –ë–î"

    def fetch_and_save_messages(self, client, channel: Channel, limit: int = 30):
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î."""
        retries = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        wait_time = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        for attempt in range(retries):
            try:
                messages = client.get_messages(channel.name, limit=limit)
                new_or_updated = 0

                for msg in messages:
                    message_obj, created = Message.objects.update_or_create(
                        channel=channel,
                        date=msg.date,
                        defaults={
                            "text": msg.text or "",
                            "views": msg.views or 0,
                            "reactions": sum(r.count for r in msg.reactions.results) if msg.reactions else 0,
                            "reposts": msg.forwards or 0,
                        }
                    )
                    if created:
                        new_or_updated += 1

                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

                return new_or_updated
            
            except FloodWaitError as e:
                print(f"‚ö† FloodWaitError: Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫.")
                time.sleep(e.seconds)
            except InvalidBufferError:
                print(f"‚ùå InvalidBufferError: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥—ë–º {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
                wait_time *= 2  # –£–¥–≤–∞–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            except UsernameInvalidError:
                print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª {channel.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
                return 0
            except Exception as e:
                print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—à–∏–±–∫–∞ {e}. –ñ–¥—ë–º {wait_time} —Å–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                time.sleep(wait_time)

        print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª {channel.name} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
        return 0

    def handle(self, *args, **options):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
        # channels = Channel.objects.all()  # –ë–µ—Ä—ë–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
        channels = Channel.objects.annotate(
                msg_count=Count("messages", distinct=True) # DISTINCT –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Message
            ).filter(Q(msg_count__lt=30) | Q(msg_count=0)) # –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ –∫–∞–Ω–∞–ª—ã, —É –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ª–∏–±–æ = 0 –∏–ª–∏ <30
        
        if not channels.exists():
            self.stdout.write(self.style.WARNING("‚ö† –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"))
            return

        self.stdout.write(self.style.NOTICE(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {channels.count()} –∫–∞–Ω–∞–ª–æ–≤..."))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ, —á—Ç–æ–±—ã –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª!
        with TelegramClient(SESSION_NAME, API_ID, API_HASH).start() as client:
            for channel in channels:
                new_or_updated = self.fetch_and_save_messages(client, channel)
                self.stdout.write(self.style.SUCCESS(f"‚úî {channel.name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {new_or_updated} —Å–æ–æ–±—â–µ–Ω–∏–π"))

                time.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º

        self.stdout.write(self.style.SUCCESS("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω"))