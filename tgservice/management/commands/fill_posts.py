from django.core.management.base import BaseCommand
from django.db.models import Count, Q
from telethon.sync import TelegramClient
from tgservice.models import Channel, Message
from django.conf import settings
from telethon.errors import FloodWaitError, UsernameInvalidError, InvalidBufferError
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º API_ID –∏ API_HASH –∏–∑ .env
API_ID, API_HASH = settings.API_ID, settings.API_HASH
API_ID_1, API_HASH_1 = settings.API_ID_1, settings.API_HASH_1
SESSION_NAME = "session_name"
SESSION_ONE = "session_one"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client_one = TelegramClient(SESSION_NAME, API_ID, API_HASH)
client_two = TelegramClient(SESSION_ONE, API_ID_1, API_HASH_1)

class Command(BaseCommand):
    help = "–ü–∞—Ä—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ –ë–î"

    def fetch_and_save_messages(self, client, channel: Channel, limit: int = 30):
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î."""
        retries = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        wait_time = 3  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        for attempt in range(retries):
            try:
                messages = client.get_messages(channel.name, limit=limit)
                new_or_updated = 0

                for msg in messages:
                    mes_obj, created = Message.objects.update_or_create(
                        channel=channel,
                        date=msg.date,
                        defaults={
                            "text": msg.text or "",
                            "views": msg.views or 0,
                            "reactions": sum(r.count for r in msg.reactions.results) if msg.reactions else 0,
                            "reposts": msg.forwards or 0,
                        }
                    )
                    if created:
                        new_or_updated += 1

                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

                return new_or_updated
            
            except FloodWaitError as e:
                raise  # –í–º–µ—Å—Ç–æ return -1, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ
            except InvalidBufferError:
                print(f"‚ùå InvalidBufferError: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥—ë–º {wait_time} —Å–µ–∫...")
                time.sleep(wait_time)
                wait_time *= 2  # –£–¥–≤–∞–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            except UsernameInvalidError:
                print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª {channel.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
                return 0
            except Exception as e:
                print(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –æ—à–∏–±–∫–∞ {e}. –ñ–¥—ë–º {wait_time} —Å–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                time.sleep(wait_time)

        print(f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª {channel.name} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
        return 0

    def handle(self, *args, **options):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
        channels = Channel.objects.annotate(
                msg_count=Count("messages", distinct=True) # DISTINCT –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Message
            ).filter(msg_count__lte=25).exclude(category__name__in=[                    # –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ –∫–∞–Ω–∞–ª—ã, —É –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π <=20
                    "SMM - social media", "–ê–≤—Ç–æ, –º–æ—Ç–æ,  —Ç–µ—Ö–Ω–∏–∫–∞", "–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã",
                    "–ë–ª–æ–≥–∏", "–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π", "–ï–ì–≠, –û–ì–≠, –≠–∫–∑–∞–º–µ–Ω—ã", "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç", 
                    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞", "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã", 
                    "–ú–µ–¥–∏—Ü–∏–Ω–∞", "–ù–∞—É–∫–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
                    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–†–∞–∑–≤–∏—Ç–∏–µ, –æ–±—É—á–µ–Ω–∏–µ", "–†—É–∫–æ–¥–µ–ª–∏–µ –∏ —Ö–æ–±–±–∏", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –†–µ–º–æ–Ω—Ç",
                    "–§–∏–ª—å–º—ã –∏ –°–µ—Ä–∏–∞–ª—ã"]).distinct() # –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –º–Ω–æ–≥–æ
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ –≤—ã–±–æ—Ä–∫—É
        categories_in_selection = sorted(set(ch.category.name for ch in channels))
        for category in categories_in_selection:
            print("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", category)

        if not channels.exists():
            self.stdout.write(self.style.WARNING("‚ö† –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"))
            return

        self.stdout.write(self.style.NOTICE(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {channels.count()} –∫–∞–Ω–∞–ª–æ–≤..."))

        clients = [client_one, client_two]
        client_index = 0

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client in clients:
            if not client.is_connected():
                client.connect()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –µ—Å—Ç—å) 
        
        # –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client_wait_times = {i: 0 for i in range(len(clients))}

        for channel in channels:
            while True:  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                try:
                    new_or_updated = self.fetch_and_save_messages(clients[client_index], channel)                   
                    self.stdout.write(self.style.SUCCESS(f"‚úî {channel.name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {new_or_updated} —Å–æ–æ–±—â–µ–Ω–∏–π"))
                    
                    client_wait_times[client_index] = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ while, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–Ω–∞–ª—É

                except FloodWaitError as e:
                    wait_time = e.seconds  
                    print(f"‚ö† FloodWaitError —É {clients[client_index].session.filename}, –∂–¥—ë–º {wait_time} —Å–µ–∫.")

                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª FloodWaitError
                    client_wait_times[client_index] = wait_time

                    # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ **–Ω–µ—Ç** FloodWaitError
                    available_clients = [i for i, t in client_wait_times.items() if t == 0]

                    if available_clients:  
                        next_client_index = available_clients[0]  
                        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ {clients[next_client_index].session.filename}")
                        client_index = next_client_index  
                        if not clients[client_index].is_connected():
                            clients[client_index].connect()
                    else:
                        # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –≤ FloodWait ‚Üí –∂–¥—ë–º **–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ** –≤—Ä–µ–º—è
                        min_wait = min(client_wait_times.values())
                        print(f"‚ö† –û–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ FloodWait! –û–∂–∏–¥–∞–µ–º {min_wait} —Å–µ–∫...")
                        time.sleep(min_wait)
                        # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–µ—Ä —É –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                        for i in client_wait_times:
                            client_wait_times[i] = max(0, client_wait_times[i] - min_wait)
                
                except Exception as e:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    break  

            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º

        self.stdout.write(self.style.SUCCESS("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω"))