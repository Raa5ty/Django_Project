from django.core.management.base import BaseCommand
from telethon import TelegramClient
from tgservice.models import Channel, Message
from django.utils.timezone import make_aware
from django.conf import settings
import asyncio
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º API_ID –∏ API_HASH –∏–∑ .env
API_ID = settings.API_ID
API_HASH = settings.API_HASH
SESSION_NAME = "session_name"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

class Command(BaseCommand):
    help = "–ü–∞—Ä—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ –ë–î"

    async def fetch_and_save_messages(self, channel: Channel, limit: int = 30):
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î."""
        async with client:
            messages = await client.get_messages(channel.name, limit=limit)

            for msg in messages:
                message_obj = Message.objects.create(
                    channel=channel,
                    date=make_aware(msg.date),
                    text=msg.text or "",
                    views=msg.views or 0,
                    reactions=sum(r.count for r in msg.reactions.results) if msg.reactions else 0,
                    reposts=msg.forwards or 0,
                )
                self.stdout.write(self.style.SUCCESS(f"‚úî –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_obj.id} –∏–∑ {channel.name}"))

    def handle(self, *args, **options):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã"""
        channels = Channel.objects.all()  # –ë–µ—Ä—ë–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î
        if not channels.exists():
            self.stdout.write(self.style.WARNING("‚ö† –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"))
            return

        self.stdout.write(self.style.NOTICE(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {channels.count()} –∫–∞–Ω–∞–ª–æ–≤..."))

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        for channel in channels:
            loop.run_until_complete(self.fetch_and_save_messages(channel))

        loop.close()
        self.stdout.write(self.style.SUCCESS("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω"))