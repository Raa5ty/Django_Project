from django.core.management.base import BaseCommand
from tgservice.prompts import system_profile, user_profile
from tgservice.models import WorkSheet
from openai import OpenAI
from datetime import timedelta
from django.conf import settings
import json
import time
import re
import os

api_key = settings.OPENAI_API_KEY

class Command(BaseCommand):
    help = '–ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ OpenAI Batch API'

    def handle(self, *args, **options):
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–µ
        self.results_dir = os.path.join(settings.BASE_DIR, "tgservice", "results_fill_db")
        if not os.path.exists(self.results_dir):
            os.makedirs(self.results_dir)
            print(f"–ü–∞–ø–∫–∞ {self.results_dir} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            print(f"–ü–∞–ø–∫–∞ {self.results_dir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        # 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ JSONL
        input_file = self.create_jsonl()
        if input_file is None:
            print("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            return

        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Batch API
        result_file = self.process_batch_split(input_file)
        if result_file is None:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ batch-–∑–∞–ø—Ä–æ—Å–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            return

        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î
        self.update_db(result_file)

    def clean_text(self, text):
        """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        text = re.sub(r'http\S+', '', text)
        return ' '.join(text.split())

    def create_jsonl(self):
        """–°–æ–∑–¥–∞—ë—Ç JSONL —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI API."""
        system_prompt = system_profile  # –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        user_prompt = user_profile

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Django ORM
        worksheets = WorkSheet.objects.filter(profile_channel=None)
        total = worksheets.count()

        if total == 0:
            return None

        json_profiles = []

        for worksheet in worksheets:
            title = self.clean_text(worksheet.title) if worksheet.title else ''
            description = self.clean_text(worksheet.description) if worksheet.description else ''
            text_messages = self.clean_text(worksheet.text_messages) if worksheet.text_messages else ''

            text_content = "\n".join(filter(None, [worksheet.category, title, description, text_messages]))
            full_user_prompt = f'{user_prompt}\n{text_content}'

            json_profile = {
                "custom_id": worksheet.channel_name,
                "method": "POST",
                "url": "/v1/chat/completions",
                "body": {
                    "model": "gpt-4o-mini",  # –ú–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": full_user_prompt}
                    ],
                    "max_tokens": 1000
                }
            }
            json_profiles.append(json_profile)

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(self.results_dir, "get_profile.jsonl")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ jsonl
        with open(file_path, 'w', encoding='utf-8') as json_file:
            for profile in json_profiles:
                json.dump(profile, json_file, ensure_ascii=False)
                json_file.write("\n")  # –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

        print(f"üìÑ JSONL-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
        print(f"üìå –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {total}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        return file_path
        
    def process_batch_split(self, input_file, max_lines=250, endpoint="/v1/chat/completions", completion_window="24h"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ batch-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏."""
        base_name = os.path.basename(input_file).split('.')[0]
        result_file_name = os.path.basename(input_file).replace("get_", "result_", 1)  # "result_profile.jsonl"
        result_file_path = os.path.join(self.results_dir, result_file_name)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        with open(input_file, "r", encoding="utf-8") as f:
            for i, line in enumerate(f, start=1):
                try:
                    json.loads(line)
                except Exception as e:
                    print(f"[!] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
        with open(input_file, "r", encoding="utf-8") as file:
            lines = file.readlines()

        total_lines = len(lines)
        if total_lines == 0:
            print("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç.")
            return None
        total_parts = (total_lines + max_lines - 1) // max_lines
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ, —á–µ–º max_lines, –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏
        if total_lines <= max_lines:
            print(f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ–≥–æ {total_lines} —Å—Ç—Ä–æ–∫, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ü–µ–ª–∏–∫–æ–º, —Ñ–∞–π–ª: {input_file}")
            parts = [input_file]  # –ü—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–¥–∏–Ω —Ñ–∞–π–ª input_file
        else:
            # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏. –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º max_lines, –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            for i in range(0, total_lines, max_lines):
                part_name = os.path.join(self.results_dir, f"{base_name}_part{(i // max_lines) + 1}.jsonl") # –ü—É—Ç—å –¥–ª—è —á–∞—Å—Ç–∏
                print(f"–°–æ–∑–¥–∞–Ω–∞ {i // max_lines + 1} —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ –∏–∑ {total_parts}, –ø–æ –ø—É—Ç–∏: {part_name}")
                with open(part_name, "w", encoding="utf-8") as part_file:
                    part_file.writelines(lines[i:i + max_lines])
                parts.append(part_name)

            print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç {total_lines} —Å—Ç—Ä–æ–∫ –∏ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        client = OpenAI(api_key=api_key)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ
        result_parts = []

        for idx, part in enumerate(parts):
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç—å {idx + 1} –∏–∑ {len(parts)}, —Ñ–∞–π–ª: {part}")

            with open(part, "rb") as file:
                uploaded_file = client.files.create(file=file, purpose="batch")
                print(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. ID: {uploaded_file.id}")

            batch_job = client.batches.create(input_file_id=uploaded_file.id, endpoint=endpoint, completion_window=completion_window)

            while batch_job.status not in ["completed", "failed", "cancelled", "expired"]:
                time.sleep(30)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
                print(f"–°—Ç–∞—Ç—É—Å batch-–∑–∞–ø—Ä–æ—Å–∞: {batch_job.status}... –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                batch_job = client.batches.retrieve(batch_job.id)

            if batch_job.status in ["completed", "expired"]:
                result_file_id = batch_job.output_file_id
                result = client.files.content(result_file_id).content

                # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                part_result_file = os.path.join(self.results_dir, f"results_{os.path.basename(part)}") # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —á–∞—Å—Ç–∏ {part}
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: {part_result_file}")
                with open(part_result_file, "wb") as file:
                    file.write(result)
                result_parts.append(part_result_file)

                start_idx = idx * max_lines
                end_idx = min(start_idx + max_lines, total_lines)
                print(f"–ß–∞—Å—Ç—å {idx + 1} —Å {end_idx - start_idx} —Å—Ç—Ä–æ–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            elif batch_job.status in ["failed", "cancelled"]:
                print(f"[!] Batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Å—Ç–∏ {idx + 1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π: —Å—Ç–∞—Ç—É—Å ‚Äî {batch_job.status}")
                # –ï—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ —É—Å–ø–µ–ª–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if not result_parts:
                    print("[!] –ù–∏ –æ–¥–Ω–∞ –∏–∑ —á–∞—Å—Ç–µ–π –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞. –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
                    return None
                else:
                    print("[!] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ. –°–æ–∑–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                    break

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
        with open(result_file_path, "w", encoding="utf-8") as outfile:
            for part_result_file in result_parts:
                with open(part_result_file, "r", encoding="utf-8") as infile:
                    outfile.writelines(infile.readlines())
                os.remove(part_result_file)

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ (input-—Ñ–∞–π–ª—ã)
        for part in parts:
            if os.path.exists(part):
                os.remove(part)
                
        # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ñ–∞–π–ª–µ
        with open(result_file_path, "r", encoding="utf-8") as final_file:
            final_total_lines = sum(1 for _ in final_file)

        print(f"–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {result_file_path} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –Ω–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç {final_total_lines} —Å—Ç—Ä–æ–∫.")
        return result_file_path
        
    def update_db(self, result_file):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É WorkSheet –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""

        with open(result_file, "r", encoding="utf-8") as file:
            results = [json.loads(line) for line in file]

        for res in results:
            channel_name = res['custom_id']  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
            content = res['response']['body']['choices'][0]['message']['content']
            input_tokens = res['response']['body']['usage']['prompt_tokens']
            output_tokens = res['response']['body']['usage']['completion_tokens']

            # –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ channel_name —á–µ—Ä–µ–∑ Django ORM
            record = WorkSheet.objects.filter(channel_name=channel_name).first()

            if record:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                record.profile_channel = content
                record.profile_intokens = input_tokens
                record.profile_outtokens = output_tokens
                record.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            else:
                print(f"–ó–∞–ø–∏—Å—å —Å channel_name '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        self.stdout.write(self.style.SUCCESS("Profile –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢–ì-–∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."))